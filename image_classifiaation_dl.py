# -*- coding: utf-8 -*-
"""Image-Classifiaation-DL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ps6elzzbU10LoK7iaDi-6KereB-l_nQu
"""

!gdown https://drive.google.com/uc?id=1Qc66kVqetwJIK7cKXnXxbPJy6gnpRSRI
!unzip The_Data.zip

from google.colab import drive
drive.mount('/content/drive')

trainpath = './seg_train/'
testpath = './seg_test/'
predpath = './seg_pred/'

for folder in  os.listdir(trainpath + 'seg_train') : 
    files = gb.glob(pathname= str( trainpath +'seg_train//' + folder + '/*.jpg'))
    print(f'For training data , found {len(files)} in folder {folder}')

for folder in  os.listdir(testpath +'seg_test') : 
    files = gb.glob(pathname= str( testpath +'seg_test//' + folder + '/*.jpg'))
    print(f'For testing data , found {len(files)} in folder {folder}')

files = gb.glob(pathname= str(predpath +'seg_pred/*.jpg'))
print(f'For Prediction data , found {len(files)}')

code_to_num = {'buildings':0 ,'forest':1, 'glacier':2, 'mountain':3, 'sea':4, 'street':5}
num_to_code = {0:'buildings' ,1:'forest', 2:'glacier', 3:'mountain', 4:'sea', 5:'street'}

def get_code(n) : 
    if n in num_to_code:
        return num_to_code[n]    

def get_num(c):
    if c in code_to_num:
        return code_to_num[c]

s = 100
X_train = []
y_train = []
for folder in  os.listdir(trainpath +'seg_train') : 
    files = gb.glob(pathname= str( trainpath +'seg_train//' + folder + '/*.jpg'))
    for file in files: 
        image = cv2.imread(file)
        image_array = cv2.resize(image , (s,s))
        X_train.append(list(image_array))
        y_train.append(get_num(folder))

plt.figure(figsize=(20,20))
for n , i in enumerate(list(np.random.randint(0,len(X_train),36))) : 
    plt.subplot(6,6,n+1)
    plt.imshow(X_train[i])   
    plt.axis('off')
    plt.title(get_code(y_train[i]))

X_test = []
y_test = []
for folder in  os.listdir(testpath +'seg_test') : 
    files = gb.glob(pathname= str(testpath + 'seg_test//' + folder + '/*.jpg'))
    for file in files: 
        image = cv2.imread(file)
        image_array = cv2.resize(image , (s,s))
        X_test.append(list(image_array))
        y_test.append(get_num(folder))

plt.figure(figsize=(20,20))
for n , i in enumerate(list(np.random.randint(0,len(X_test),36))) : 
    plt.subplot(6,6,n+1)
    plt.imshow(X_test[i])    
    plt.axis('off')
    plt.title(get_code(y_test[i]))

X_pred = []
files = gb.glob(pathname= str(predpath + 'seg_pred/*.jpg'))
for file in files: 
    image = cv2.imread(file)
    image_array = cv2.resize(image , (s,s))
    X_pred.append(list(image_array))

plt.figure(figsize=(20,20))
for n , i in enumerate(list(np.random.randint(0,len(X_pred),36))) : 
    plt.subplot(6,6,n+1)
    plt.imshow(X_pred[i])    
    plt.axis('off')

X_train = np.array(X_train)
X_test = np.array(X_test)
X_pred_array = np.array(X_pred)
y_train = np.array(y_train)
y_test = np.array(y_test)

print(f'X_train shape  is {X_train.shape}')
print(f'X_test shape  is {X_test.shape}')
print(f'X_pred shape  is {X_pred_array.shape}')
print(f'y_train shape  is {y_train.shape}')
print(f'y_test shape  is {y_test.shape}')

KerasModel = keras.models.Sequential()
    
KerasModel.add(  keras.layers.Conv2D(64,(4,4),activation="relu",input_shape=(100,100,3)) )
KerasModel.add(  keras.layers.MaxPool2D(pool_size=(3,3)) )
KerasModel.add(  keras.layers.Dropout(0.2) )
KerasModel.add(  keras.layers.Conv2D(128,(4,4),activation="relu") )
KerasModel.add(  keras.layers.MaxPool2D(pool_size=(3,3)) )
KerasModel.add(  keras.layers.Dropout(0.2) )
KerasModel.add(  keras.layers.Conv2D(128,(4,4),activation="relu") )
KerasModel.add(  keras.layers.MaxPool2D(pool_size=(2,2)) )
KerasModel.add(  keras.layers.Dropout(0.2) )
KerasModel.add(  keras.layers.Flatten()  )
KerasModel.add(  keras.layers.Dense(6,activation="sigmoid")  )

KerasModel.compile(optimizer='adam', loss='sparse_categorical_crossentropy',metrics='accuracy')

print('Model Details are : ')
print(KerasModel.summary())

ThisModel = KerasModel.fit(X_train,y_train,epochs=50)

ModelLoss, ModelAccuracy = KerasModel.evaluate(X_test, y_test)

print('Test Loss is {}'.format(ModelLoss))
print('Test Accuracy is {}'.format(ModelAccuracy ))

y_result = KerasModel.predict(X_pred_array)

plt.figure(figsize=(20,20))
for n , i in enumerate(list(np.random.randint(0,len(X_pred),36))) : 
    plt.subplot(6,6,n+1)
    plt.imshow(X_pred[i])    
    plt.axis('off')
    plt.title(get_code(np.argmax(y_result[i])))

vgg16 = keras.applications.VGG16(weights='imagenet',include_top=False,input_shape=(100,100,3))
for layers in vgg16.layers :
  layers.trainable=False

flattened=keras.layers.Flatten()(vgg16.output)
output_layer=keras.layers.Dense(6,activation='sigmoid')(flattened)

vgg_model=keras.models.Model(inputs=vgg16.input,outputs=output_layer)
vgg_model.summary()

vgg_model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
Training_vgg = vgg_model.fit(X_train,y_train,epochs=10)

ModelLoss, ModelAccuracy = vgg_model.evaluate(X_test, y_test)
print('Test Loss is {}'.format(ModelLoss))
print('Test Accuracy is {}'.format(ModelAccuracy ))

vgg_pred=vgg_model.predict(X_pred_array)
plt.figure(figsize=(20,20))
for n,i in enumerate(list(np.random.randint(0,len(vgg_pred),36))):
  plt.subplot(6,6,n+1)
  plt.imshow(X_pred_array[i])
  plt.axis("off")
  plt.title(get_code(np.argmax(vgg_pred[i])))